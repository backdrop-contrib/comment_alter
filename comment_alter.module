<?php
// $Id$

/**
 * @file
 * Provides UI to alter nodes' parameters from comment forms.
 *
 * @author
 * CSÉCSY László <boobaa@kybest.hu>
 */

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @see comment_alter_form_field_ui_field_edit_form_alter_submit()
 */
function comment_alter_form_field_ui_field_edit_form_alter(&$form, &$form_state) {
  if ($form['instance']['entity_type']['#value'] == 'node') {
    $form['#comment_alter'] = array(
      '#type' => 'value',
      '#value' => variable_get('comment_alter_' . $form['instance']['bundle']['#value'], array()),
    );
    $form['instance']['comment_alter'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable altering this field from comments.'),
      '#weight' => $form['instance']['required']['#weight'] + 0.5,
      '#default_value' => isset($form['#comment_alter']['#value'][$form['instance']['field_name']['#value']]) ? $form['#comment_alter']['#value'][$form['instance']['field_name']['#value']] : FALSE,
    );
    $form['#submit'][] = 'comment_alter_form_field_ui_field_edit_form_alter_submit';
  }
}

/**
 * Stores status of comment-alterable checkbox.
 *
 * @see comment_alter_form_field_ui_field_edit_form_alter()
 */
function comment_alter_form_field_ui_field_edit_form_alter_submit($form, &$form_state) {
  // Store only those field names that have been set to be comment-alterable
  // for performance reasons.
  $comment_alter = $form['#comment_alter']['#value'];
  $comment_alter[$form['instance']['field_name']['#value']] = $form_state['values']['instance']['comment_alter'];
  $comment_alter = array_filter($comment_alter);
  variable_set('comment_alter_' . $form['instance']['bundle']['#value'], $comment_alter);
}


/**
 * Implements hook_form_alter().
 */
function comment_alter_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#id'] == 'comment-form') {
    $edit_comment = !empty($form['cid']['#value']);
    $node = $form['#node'];
    $type = node_type_get_type($node);
    $comment_alter_fields = array_keys(variable_get('comment_alter_' . $node->type, array()));
    // Add widgets on new comment form only.
    if (empty($form['cid']['#value'])) {
      // OK, let's twist things a little bit. Save our precious $form, call
      // field_attach_form() which modifies it (by adding the fields),
      // save the full form with all the fields, restore our precious saved
      // form without the fields, and add only the needed fields to it.
      // Simple, isn't it? Weird, but works; patches welcome for a less
      // resource-hungry version (or simply 'better', by any means).
      $precious_form = $form;
      field_attach_form('node', $node, $form, $form_state, $node->language);
      $full_form = $form;
      $form = $precious_form;
      foreach ($comment_alter_fields as $field) {
        $form['comment_alter']['old'][$field] = array(
          '#type' => 'value',
          '#value' => $node->{$field}[$node->language],
        );
        $form['comment_alter']['new'][$field] = $full_form[$field];
        $field_info_instance = field_info_instance('node', $field, $node->type);
        $form['comment_alter']['new'][$field]['#weight'] = $field_info_instance['widget']['weight'];
      }
      $form['comment_alter']['#tree'] = TRUE;
      $form['comment_alter']['old_vid'] = array(
        '#type' => 'value',
        '#value' => $node->vid,
      );
    }
  }
}

/**
 * Implements hook_comment_insert().
 */
function comment_alter_comment_insert($comment) {
  $comment_alter = array();
  $node = node_load($comment->nid);
  foreach ($comment->comment_alter['new'] as $field => $value) {
    if ($comment->comment_alter['old'][$field] != $value) {
      $field_changed = FALSE;
      foreach ($value[$node->language] as $delta => $deltavalue) {
        foreach ($deltavalue as $subfield => $subvalue) {
          if ($comment->comment_alter['old'][$field][$delta][$subfield] != $subvalue) {
            $field_changed = TRUE;
            $node->{$field}[$node->language][$delta][$subfield] = $subvalue;
          }
        }
      }
      if ($field_changed) {
        $comment_alter[$field] = array(
          'old' => $comment->comment_alter['old'][$field],
          'new' => $comment->comment_alter['new'][$field][$node->language],
        );
      }
    }
  }
  if (!empty($comment_alter)) {
    // Creating a new node revision regardless the node type settings.
    $node->revision = TRUE;
    node_save($node);
    $store = array(
      'cid' => $comment->cid,
      'vid' => $node->vid,
      'data' => serialize($comment_alter),
    );
    drupal_write_record('comment_alter', $store);
  }
  // Unsetting $comment->comment_alter is not needed.
}

/**
 * Implements hook_comment_load().
 */
function comment_alter_comment_load($comments) {
  $result = db_query('SELECT cid, vid, data FROM {comment_alter} WHERE cid IN (:cids)', array(':cids' => array_keys($comments)));
  foreach ($result as $row) {
    $comments[$row->cid]->comment_alter['vid'] = $row->vid;
    $data = unserialize($row->data);
    foreach ($data as $field => $value) {
      $comments[$row->cid]->comment_alter['fields'][$field]['old'] = $value['old'];
      $comments[$row->cid]->comment_alter['fields'][$field]['new'] = $value['new'];
    }
  }
}

/**
 * Implements hook_comment_view().
 */
function comment_alter_comment_view($comment, $view_mode, $langcode) {
  if (($view_mode == 'full') && isset($comment->comment_alter) && isset($comment->comment_alter['fields']) && !empty($comment->comment_alter['fields'])) {
    $node = node_load($comment->nid);
    $type = node_type_get_type($node);
    $comment->content['comment_alter'] = array(
      '#theme' => 'table',
      '#weight' => -1,
      '#header' => array(t('Field'), t('Old value'), t('New value')),
      '#rows' => array(),
    );
    $comment->content['links']['comment']['#links']['comment-alter'] = array(
      'title' => t('view full node revision'),
      'href' => 'node/' . $node->nid . '/revisions/' . $comment->comment_alter['vid'] . '/view',
      'html' => TRUE,
    );
    foreach ($comment->comment_alter['fields'] as $field => $value) {
      if ($field == 'title') {
        $comment->content['comment_alter']['#rows'][] = array(
          // XXX: i18n?
          check_plain($type->title_label),
          check_plain($value['old']),
          check_plain($value['new']),
          'weight' => -99,
        );
      }
      else {
        $field_info_field = field_info_field($field);
        $field_info_instance = field_info_instance('node', $field, $node->type);
        $old_element = field_default_view('node', $node, $field_info_field, $field_info_instance, $node->language, $value['old'], 'full');
        $new_element = field_default_view('node', $node, $field_info_field, $field_info_instance, $node->language, $value['new'], 'full');
        $comment->content['comment_alter']['#rows'][] = array(
          // XXX: i18n?
          check_plain($field_info_instance['label']),
          drupal_render($old_element),
          drupal_render($new_element),
          'weight' => $field_info_instance['display']['default']['weight'],
        );
      }
    }
    _comment_alter_sort_fields($comment->content['comment_alter']['#rows']);
  }
}

/**
 * Sort altered fields by their weights.
 */
function _comment_alter_sort_fields(&$rows) {
  uasort($rows, 'drupal_sort_weight');
  foreach ($rows as &$value) {
    unset($value['weight']);
  }
}

/**
 * Implements hook_comment_delete().
 */
function comment_alter_comment_delete($comment) {
  db_delete('comment_alter')
    ->condition('cid', $comment->cid)
    ->execute();
}

/**
 * No need to implement hook_comment_update(), hook_comment_presave(),
 * hook_comment_publish(), hook_comment_unpublish() nor
 * hook_comment_view_alter().
 */
